{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Hydrawise REST-API URL\nconst hydrawise_url = \"https://api.hydrawise.com\";\nlet nextpoll: any = null;\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\nimport axios from \"axios\";\n\nclass Hydrawise extends utils.Adapter {\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"hydrawise\",\n\t\t});\n\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\t// Initialize your adapter here\n\n\t\t// validate if apiKey is set\n\t\tif (!this.config.apiKey) {\n\t\t\tthis.log.error(\"No API-Key definded!\");\n\t\t} else {\n\t\t\tthis.log.info(\"config apiKey: \" + this.config.apiKey);\n\t\t}\n\n\t\t// Reset the connection indicator during startup\n\t\tthis.setStateChangedAsync(\"info.connection\", false, true);\n\n\t\t// await this.GetCustomerDetails(this.config.apiKey);\n\n\t\tawait this.GetStatusSchedule(this.config.apiKey);\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === \"object\" && obj.message) {\n\t// \t\tif (obj.command === \"send\") {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info(\"send command\");\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate async GetStatusSchedule(apiKey: string): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.log.debug(\"refreshing device state\");\n\n\t\t\tthis.log.debug(\"re-creating refresh state timeout\");\n\n\t\t\tnextpoll =\n\t\t\t\tnextpoll ||\n\t\t\t\tthis.setTimeout(() => {\n\t\t\t\t\tnextpoll = null;\n\t\t\t\t\tthis.GetStatusSchedule(apiKey);\n\t\t\t\t}, 60000);\n\n\t\t\tthis.buildRequest(\"statusschedule.php\", \"GET\")\n\t\t\t\t.then(async (response) => {\n\t\t\t\t\tif (response.status === 200) {\n\t\t\t\t\t\tconst content = response.data;\n\n\t\t\t\t\t\tthis.setStateChangedAsync(\"info.connection\", true, true);\n\n\t\t\t\t\t\tfor (const key in content) {\n\t\t\t\t\t\t\tif (key !== \"relays\" && key !== \"sensors\") {\n\t\t\t\t\t\t\t\tawait this.setObjectNotExistsAsync(`schedule.${key}`, {\n\t\t\t\t\t\t\t\t\ttype: \"state\",\n\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\tname: key,\n\t\t\t\t\t\t\t\t\t\ttype: key === \"message\" ? \"string\" : \"number\",\n\t\t\t\t\t\t\t\t\t\trole: key === \"message\" ? \"text\" : \"value\",\n\t\t\t\t\t\t\t\t\t\tread: true,\n\t\t\t\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tthis.setStateChangedAsync(`schedule.${key}`, content[key], true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const relay of content.relays) {\n\t\t\t\t\t\t\tawait this.setObjectNotExistsAsync(`schedule.${relay.name}`, {\n\t\t\t\t\t\t\t\ttype: \"channel\",\n\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\tname: relay.name,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tfor (const key in relay) {\n\t\t\t\t\t\t\t\tawait this.setObjectNotExistsAsync(`schedule.${relay.name}.${key}`, {\n\t\t\t\t\t\t\t\t\ttype: \"state\",\n\t\t\t\t\t\t\t\t\tcommon: {\n\t\t\t\t\t\t\t\t\t\tname: key,\n\t\t\t\t\t\t\t\t\t\ttype: key === \"name\" ? \"string\" : \"number\",\n\t\t\t\t\t\t\t\t\t\trole: key === \"name\" ? \"text\" : \"value\",\n\t\t\t\t\t\t\t\t\t\tread: true,\n\t\t\t\t\t\t\t\t\t\twrite: false,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tnative: {},\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tthis.setStateChangedAsync(`schedule.${relay.name}.${key}`, relay[key], true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// ToDo\n\t\t\t\t\t\t// for (const sensor of content.sensors) {\n\t\t\t\t\t\t// await this.setObjectNotExistsAsync(`schedule.${sensor.name}`, {\n\t\t\t\t\t\t// \ttype: \"channel\",\n\t\t\t\t\t\t// \tcommon: {\n\t\t\t\t\t\t// \t\tname: sensor.name,\n\t\t\t\t\t\t// \t},\n\t\t\t\t\t\t// \tnative: {},\n\t\t\t\t\t\t// });\n\t\t\t\t\t\t// for (const key in sensor) {\n\t\t\t\t\t\t// \tawait this.setObjectNotExistsAsync(`schedule.${sensor.name}.${key}`, {\n\t\t\t\t\t\t// \t\ttype: \"state\",\n\t\t\t\t\t\t// \t\tcommon: {\n\t\t\t\t\t\t// \t\t\tname: key,\n\t\t\t\t\t\t// \t\t\ttype: key === \"name\" ? \"string\" : \"number\",\n\t\t\t\t\t\t// \t\t\trole: key === \"name\" ? \"text\" : \"value\",\n\t\t\t\t\t\t// \t\t\tread: true,\n\t\t\t\t\t\t// \t\t\twrite: false,\n\t\t\t\t\t\t// \t\t},\n\t\t\t\t\t\t// \t\tnative: {},\n\t\t\t\t\t\t// \t});\n\t\t\t\t\t\t// \tthis.setStateChangedAsync(`schedule.${sensor.name}.${key}`, sensor[key], true);\n\t\t\t\t\t\t// }\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(response.status);\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tthis.log.debug(`(stats) received error - API is now offline: ${JSON.stringify(error)}`);\n\n\t\t\t\t\tthis.setStateChangedAsync(\"info.connection\", false, true);\n\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate async GetCustomerDetails(apiKey: string): Promise<void> {\n\t\tconst url = hydrawise_url + \"customerdetails.php\";\n\t\ttry {\n\t\t\tconst customerDetails = await axios.get<CustomerDetails>(url, {\n\t\t\t\theaders: {\n\t\t\t\t\tAccept: \"application/json\",\n\t\t\t\t},\n\t\t\t\tparams: {\n\t\t\t\t\tapi_key: apiKey,\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tthis.log.info(\"customerDetails: \" + JSON.stringify(customerDetails.data, null, 4));\n\t\t} catch (error) {\n\t\t\tif (axios.isAxiosError(error)) {\n\t\t\t\tthis.log.error(\"error message: \" + error.message);\n\t\t\t} else {\n\t\t\t\tthis.log.error(\"unexpected error: \" + error);\n\t\t\t}\n\t\t}\n\t}\n\n\tbuildRequest(service: string, method: string, data?: any): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst url = `/api/v1/${service}`;\n\t\t\tlet lastErrorCode = 0;\n\n\t\t\tif (this.config.apiKey) {\n\t\t\t\tif (data) {\n\t\t\t\t\tthis.log.debug(`sending \"${method}\" request to \"${url}\" with data: ${JSON.stringify(data)}`);\n\t\t\t\t} else {\n\t\t\t\t\tthis.log.debug(`sending \"${method}\" request to \"${url}\" without data`);\n\t\t\t\t}\n\n\t\t\t\taxios({\n\t\t\t\t\tmethod: method,\n\t\t\t\t\tdata: data,\n\t\t\t\t\tbaseURL: hydrawise_url,\n\t\t\t\t\turl: url,\n\t\t\t\t\ttimeout: 3000,\n\t\t\t\t\tresponseType: \"json\",\n\t\t\t\t\tparams: {\n\t\t\t\t\t\tapi_key: this.config.apiKey,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tthis.log.debug(\n\t\t\t\t\t\t\t`received ${response.status} response from \"${url}\" with content: ${JSON.stringify(\n\t\t\t\t\t\t\t\tresponse.data,\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// no error - clear up reminder\n\t\t\t\t\t\tlastErrorCode = 0;\n\n\t\t\t\t\t\tresolve(response);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\tif (error.response) {\n\t\t\t\t\t\t\t// The request was made and the server responded with a status code\n\n\t\t\t\t\t\t\tthis.log.warn(\n\t\t\t\t\t\t\t\t`received ${error.response.status} response from ${url} with content: ${JSON.stringify(\n\t\t\t\t\t\t\t\t\terror.response.data,\n\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} else if (error.request) {\n\t\t\t\t\t\t\t// The request was made but no response was received\n\t\t\t\t\t\t\t// `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n\t\t\t\t\t\t\t// http.ClientRequest in node.js\n\n\t\t\t\t\t\t\t// avoid spamming of the same error when stuck in a reconnection loop\n\t\t\t\t\t\t\tif (error.code === lastErrorCode) {\n\t\t\t\t\t\t\t\tthis.log.debug(error.message);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.log.info(`error ${error.code} from ${url}: ${error.message}`);\n\t\t\t\t\t\t\t\tlastErrorCode = error.code;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Something happened in setting up the request that triggered an Error\n\t\t\t\t\t\t\tthis.log.error(error.message);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treject(\"Device IP is not configured\");\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface StatusSchedule {\n\tmessage: string;\n\tnextpoll: number;\n\ttime: number;\n\trelays?: {\n\t\trelay_id: number;\n\t\trelay: number;\n\t\tname: string;\n\t\ttimestr: string;\n\t\ttime: number;\n\t\trun: string;\n\t};\n\tmaster: number;\n\tmaster_timer: number;\n\tsensors?: {\n\t\tinput: number;\n\t\ttype: number;\n\t\tmode: number;\n\t\trelay?: {\n\t\t\tid: number;\n\t\t};\n\t};\n}\n\ninterface CustomerDetails {\n\tcontroller_id: number;\n\tcustomer_id: number;\n\tcurrent_controller: string;\n\tcontroller?: {\n\t\tname: string;\n\t\tlast_contact: string;\n\t\tserial_number: string;\n\t\tcontroller_id: number;\n\t\tstatus: string;\n\t};\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Hydrawise(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new Hydrawise())();\n}\n"],
  "mappings": "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",
  "names": ["axios"]
}
